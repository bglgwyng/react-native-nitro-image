///
/// AssetImageLoadOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ImageSize` to properly resolve imports.
namespace margelo::nitro::image { struct ImageSize; }
// Forward declaration of `AspectFit` to properly resolve imports.
namespace margelo::nitro::image { enum class AspectFit; }

#include <optional>
#include "ImageSize.hpp"
#include "AspectFit.hpp"

namespace margelo::nitro::image {

  /**
   * A struct which can be represented as a JavaScript object (AssetImageLoadOptions).
   */
  struct AssetImageLoadOptions {
  public:
    double hi     SWIFT_PRIVATE;
    std::optional<ImageSize> size     SWIFT_PRIVATE;
    AspectFit aspectFit     SWIFT_PRIVATE;

  public:
    AssetImageLoadOptions() = default;
    explicit AssetImageLoadOptions(double hi, std::optional<ImageSize> size, AspectFit aspectFit): hi(hi), size(size), aspectFit(aspectFit) {}
  };

} // namespace margelo::nitro::image

namespace margelo::nitro {

  using namespace margelo::nitro::image;

  // C++ AssetImageLoadOptions <> JS AssetImageLoadOptions (object)
  template <>
  struct JSIConverter<AssetImageLoadOptions> final {
    static inline AssetImageLoadOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AssetImageLoadOptions(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "hi")),
        JSIConverter<std::optional<ImageSize>>::fromJSI(runtime, obj.getProperty(runtime, "size")),
        JSIConverter<AspectFit>::fromJSI(runtime, obj.getProperty(runtime, "aspectFit"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AssetImageLoadOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "hi", JSIConverter<double>::toJSI(runtime, arg.hi));
      obj.setProperty(runtime, "size", JSIConverter<std::optional<ImageSize>>::toJSI(runtime, arg.size));
      obj.setProperty(runtime, "aspectFit", JSIConverter<AspectFit>::toJSI(runtime, arg.aspectFit));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "hi"))) return false;
      if (!JSIConverter<std::optional<ImageSize>>::canConvert(runtime, obj.getProperty(runtime, "size"))) return false;
      if (!JSIConverter<AspectFit>::canConvert(runtime, obj.getProperty(runtime, "aspectFit"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
