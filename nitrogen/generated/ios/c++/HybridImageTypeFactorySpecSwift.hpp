///
/// HybridImageTypeFactorySpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridImageTypeFactorySpec.hpp"

// Forward declaration of `HybridImageTypeFactorySpec_cxx` to properly resolve imports.
namespace NitroImage { class HybridImageTypeFactorySpec_cxx; }

// Forward declaration of `HybridImageTypeSpec` to properly resolve imports.
namespace margelo::nitro::nitroimage { class HybridImageTypeSpec; }

#include <NitroModules/Promise.hpp>
#include <memory>
#include "HybridImageTypeSpec.hpp"
#include <string>

#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitroimage {

  /**
   * The C++ part of HybridImageTypeFactorySpec_cxx.swift.
   *
   * HybridImageTypeFactorySpecSwift (C++) accesses HybridImageTypeFactorySpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridImageTypeFactorySpec_cxx can directly inherit from the C++ class HybridImageTypeFactorySpec
   * to simplify the whole structure and memory management.
   */
  class HybridImageTypeFactorySpecSwift: public virtual HybridImageTypeFactorySpec {
  public:
    // Constructor from a Swift instance
    explicit HybridImageTypeFactorySpecSwift(const NitroImage::HybridImageTypeFactorySpec_cxx& swiftPart):
      HybridObject(HybridImageTypeFactorySpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroImage::HybridImageTypeFactorySpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    // Get memory pressure
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec>>> loadFromURL(const std::string& url) override {
      auto __result = _swiftPart.loadFromURL(url);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroImage::HybridImageTypeFactorySpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::nitroimage
