///
/// NitroImage-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "NitroImage-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridImageTypeFactorySpecSwift.hpp"
#include "HybridImageTypeSpecSwift.hpp"
#include "NitroImage-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::nitroimage::bridge::swift {

  // pragma MARK: std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec>
  std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec> create_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeSpec_(void* _Nonnull swiftUnsafePointer) {
    NitroImage::HybridImageTypeSpec_cxx swiftPart = NitroImage::HybridImageTypeSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::nitroimage::HybridImageTypeSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeSpec_(std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeSpec_ cppType) {
    std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::nitroimage::HybridImageTypeSpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridImageTypeSpec\" is not implemented in Swift!");
    }
  #endif
    NitroImage::HybridImageTypeSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }
  
  // pragma MARK: std::function<void(const std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec>& /* result */)>
  Func_void_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeSpec_ create_Func_void_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeSpec_(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroImage::Func_void_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeSpec_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) {
    auto swiftClosure = NitroImage::Func_void_std__exception_ptr::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::exception_ptr& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeFactorySpec>
  std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeFactorySpec> create_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeFactorySpec_(void* _Nonnull swiftUnsafePointer) {
    NitroImage::HybridImageTypeFactorySpec_cxx swiftPart = NitroImage::HybridImageTypeFactorySpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::nitroimage::HybridImageTypeFactorySpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeFactorySpec_(std__shared_ptr_margelo__nitro__nitroimage__HybridImageTypeFactorySpec_ cppType) {
    std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeFactorySpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::nitroimage::HybridImageTypeFactorySpecSwift>(cppType);
  #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridImageTypeFactorySpec\" is not implemented in Swift!");
    }
  #endif
    NitroImage::HybridImageTypeFactorySpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::nitroimage::bridge::swift
