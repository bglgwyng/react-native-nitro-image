///
/// HybridImageTypeSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImageTypeSpec``
public protocol HybridImageTypeSpec_protocol: HybridObject {
  // Properties
  var width: Double { get }
  var height: Double { get }

  // Methods
  
}

/// See ``HybridImageTypeSpec``
public class HybridImageTypeSpec_base {
  private weak var cxxWrapper: HybridImageTypeSpec_cxx? = nil
  public func getCxxWrapper() -> HybridImageTypeSpec_cxx {
  #if DEBUG
    guard self is HybridImageTypeSpec else {
      fatalError("`self` is not a `HybridImageTypeSpec`! Did you accidentally inherit from `HybridImageTypeSpec_base` instead of `HybridImageTypeSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImageTypeSpec_cxx(self as! HybridImageTypeSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ImageType HybridObject.
 * Implement this protocol to create Swift-based instances of ImageType.
 * ```swift
 * class HybridImageType : HybridImageTypeSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImageTypeSpec = HybridImageTypeSpec_protocol & HybridImageTypeSpec_base
