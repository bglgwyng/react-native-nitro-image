///
/// HybridImageTypeFactorySpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImageTypeFactorySpec``
public protocol HybridImageTypeFactorySpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func loadFromURL(url: String) throws -> Promise<(any HybridImageTypeSpec)>
}

/// See ``HybridImageTypeFactorySpec``
public class HybridImageTypeFactorySpec_base {
  private weak var cxxWrapper: HybridImageTypeFactorySpec_cxx? = nil
  public func getCxxWrapper() -> HybridImageTypeFactorySpec_cxx {
  #if DEBUG
    guard self is HybridImageTypeFactorySpec else {
      fatalError("`self` is not a `HybridImageTypeFactorySpec`! Did you accidentally inherit from `HybridImageTypeFactorySpec_base` instead of `HybridImageTypeFactorySpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImageTypeFactorySpec_cxx(self as! HybridImageTypeFactorySpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ImageTypeFactory HybridObject.
 * Implement this protocol to create Swift-based instances of ImageTypeFactory.
 * ```swift
 * class HybridImageTypeFactory : HybridImageTypeFactorySpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImageTypeFactorySpec = HybridImageTypeFactorySpec_protocol & HybridImageTypeFactorySpec_base
