///
/// AssetImageLoadOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `AssetImageLoadOptions`, backed by a C++ struct.
 */
public typealias AssetImageLoadOptions = margelo.nitro.image.AssetImageLoadOptions

public extension AssetImageLoadOptions {
  private typealias bridge = margelo.nitro.image.bridge.swift

  /**
   * Create a new instance of `AssetImageLoadOptions`.
   */
  init(hi: Double, size: ImageSize?, aspectFit: AspectFit?) {
    self.init(hi, { () -> bridge.std__optional_ImageSize_ in
      if let __unwrappedValue = size {
        return bridge.create_std__optional_ImageSize_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_AspectFit_ in
      if let __unwrappedValue = aspectFit {
        return bridge.create_std__optional_AspectFit_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var hi: Double {
    @inline(__always)
    get {
      return self.__hi
    }
    @inline(__always)
    set {
      self.__hi = newValue
    }
  }
  
  var size: ImageSize? {
    @inline(__always)
    get {
      return { () -> ImageSize? in
        if let __unwrapped = self.__size.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__size = { () -> bridge.std__optional_ImageSize_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_ImageSize_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var aspectFit: AspectFit? {
    @inline(__always)
    get {
      return self.__aspectFit.value
    }
    @inline(__always)
    set {
      self.__aspectFit = { () -> bridge.std__optional_AspectFit_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_AspectFit_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
