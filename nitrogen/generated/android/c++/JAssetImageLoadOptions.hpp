///
/// JAssetImageLoadOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "AssetImageLoadOptions.hpp"

#include "AspectFit.hpp"
#include "ImageSize.hpp"
#include "JAspectFit.hpp"
#include "JImageSize.hpp"
#include <optional>

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "AssetImageLoadOptions" and the the Kotlin data class "AssetImageLoadOptions".
   */
  struct JAssetImageLoadOptions final: public jni::JavaClass<JAssetImageLoadOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/AssetImageLoadOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct AssetImageLoadOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    AssetImageLoadOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldHi = clazz->getField<double>("hi");
      double hi = this->getFieldValue(fieldHi);
      static const auto fieldSize = clazz->getField<JImageSize>("size");
      jni::local_ref<JImageSize> size = this->getFieldValue(fieldSize);
      static const auto fieldAspectFit = clazz->getField<JAspectFit>("aspectFit");
      jni::local_ref<JAspectFit> aspectFit = this->getFieldValue(fieldAspectFit);
      return AssetImageLoadOptions(
        hi,
        size != nullptr ? std::make_optional(size->toCpp()) : std::nullopt,
        aspectFit->toCpp()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JAssetImageLoadOptions::javaobject> fromCpp(const AssetImageLoadOptions& value) {
      return newInstance(
        value.hi,
        value.size.has_value() ? JImageSize::fromCpp(value.size.value()) : nullptr,
        JAspectFit::fromCpp(value.aspectFit)
      );
    }
  };

} // namespace margelo::nitro::image
