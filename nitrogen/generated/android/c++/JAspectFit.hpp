///
/// JAspectFit.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "AspectFit.hpp"

namespace margelo::nitro::image {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ enum "AspectFit" and the the Kotlin enum "AspectFit".
   */
  struct JAspectFit final: public jni::JavaClass<JAspectFit> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/image/AspectFit;";

  public:
    /**
     * Convert this Java/Kotlin-based enum to the C++ enum AspectFit.
     */
    [[maybe_unused]]
    [[nodiscard]]
    AspectFit toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldOrdinal = clazz->getField<int>("_ordinal");
      int ordinal = this->getFieldValue(fieldOrdinal);
      return static_cast<AspectFit>(ordinal);
    }

  public:
    /**
     * Create a Java/Kotlin-based enum with the given C++ enum's value.
     */
    [[maybe_unused]]
    static jni::alias_ref<JAspectFit> fromCpp(AspectFit value) {
      static const auto clazz = javaClassStatic();
      static const auto fieldFIT = clazz->getStaticField<JAspectFit>("FIT");
      static const auto fieldFILL = clazz->getStaticField<JAspectFit>("FILL");
      
      switch (value) {
        case AspectFit::FIT:
          return clazz->getStaticFieldValue(fieldFIT);
        case AspectFit::FILL:
          return clazz->getStaticFieldValue(fieldFILL);
        default:
          std::string stringValue = std::to_string(static_cast<int>(value));
          throw std::invalid_argument("Invalid enum value (" + stringValue + "!");
      }
    }
  };

} // namespace margelo::nitro::image
