///
/// JHybridImageTypeFactorySpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridImageTypeFactorySpec.hpp"

// Forward declaration of `HybridImageTypeSpec` to properly resolve imports.
namespace margelo::nitro::nitroimage { class HybridImageTypeSpec; }

#include <NitroModules/Promise.hpp>
#include <memory>
#include "HybridImageTypeSpec.hpp"
#include <NitroModules/JPromise.hpp>
#include "JHybridImageTypeSpec.hpp"
#include <NitroModules/JNISharedPtr.hpp>
#include <string>

namespace margelo::nitro::nitroimage {

  jni::local_ref<JHybridImageTypeFactorySpec::jhybriddata> JHybridImageTypeFactorySpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridImageTypeFactorySpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImageTypeFactorySpec::initHybrid),
    });
  }

  size_t JHybridImageTypeFactorySpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec>>> JHybridImageTypeFactorySpec::loadFromURL(const std::string& url) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* url */)>("loadFromURL");
    auto __result = method(_javaPart, jni::make_jstring(url));
    return [&]() {
      auto __promise = Promise<std::shared_ptr<margelo::nitro::nitroimage::HybridImageTypeSpec>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JHybridImageTypeSpec::javaobject>(__boxedResult);
        __promise->resolve(JNISharedPtr::make_shared_from_jni<JHybridImageTypeSpec>(jni::make_global(__result)));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitroimage
