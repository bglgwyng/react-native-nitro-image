///
/// JHybridImageSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridImageSpec.hpp"

// Forward declaration of `ArrayBuffer` to properly resolve imports.
namespace NitroModules { class ArrayBuffer; }

#include <NitroModules/ArrayBuffer.hpp>
#include <NitroModules/JArrayBuffer.hpp>
#include <NitroModules/JUnit.hpp>

namespace margelo::nitro::image {

  jni::local_ref<JHybridImageSpec::jhybriddata> JHybridImageSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridImageSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridImageSpec::initHybrid),
    });
  }

  size_t JHybridImageSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  double JHybridImageSpec::getWidth() {
    static const auto method = javaClassStatic()->getMethod<double()>("getWidth");
    auto __result = method(_javaPart);
    return __result;
  }
  double JHybridImageSpec::getHeight() {
    static const auto method = javaClassStatic()->getMethod<double()>("getHeight");
    auto __result = method(_javaPart);
    return __result;
  }

  // Methods
  std::shared_ptr<ArrayBuffer> JHybridImageSpec::toArrayBuffer() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JArrayBuffer::javaobject>()>("toArrayBuffer");
    auto __result = method(_javaPart);
    return __result->cthis()->getArrayBuffer();
  }

} // namespace margelo::nitro::image
